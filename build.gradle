plugins {
	id 'java'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1'
}

dependencies {
	afterEvaluate {
		subprojects.each {
			testmodImplementation sourceSets.main.output
			implementation project(path: "${it.name}", configuration: "dev")
			include project("${it.name}:")
		}
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'
	apply plugin: 'io.github.juuxel.loom-quiltflower-mini'

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	group = project.maven_group

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	quiltflower {
		addToRuntimeClasspath.set(true)
	}

	dependencies {
		minecraft "com.mojang:minecraft:$project.minecraft_version"
		mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"
		modImplementation "net.fabricmc:fabric-loader:$project.loader_version"

		compileOnly "com.google.code.findbugs:jsr305:3.0.2"
	}

	configurations {
		dev
	}

	repositories {
		mavenLocal()
	}

	jar {
		classifier = "dev"
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
			archiveName = "${archivesBaseName}-${version}.jar"
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			filesMatching("fabric.mod.json") {
				expand "version": project.version
			}
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = "sources"
		from sourceSets.main.allSource
	}

	tasks.withType(JavaCompile) {
		it.options.encoding = "UTF-8"
		it.options.release = 17
	}
}

subprojects {
	version = rootProject.version

	task remapMavenJar(type: Copy, dependsOn: remapJar) {
		afterEvaluate {
			from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
			into("${project.buildDir}/libs/")
			rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
		}
	}

	publish {
		onlyIf {
			checkVersion(archivesBaseName, version)
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				afterEvaluate {
					artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
						builtBy remapMavenJar
					}
					artifact(sourcesJar) {
						builtBy remapSourcesJar
					}
				}
			}
		}

		setupRepositories(repositories)
	}

	javadoc.enabled = false
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	if (ENV.MAVEN_URL) {
		repositories.maven {
			url ENV.MAVEN_URL
			credentials {
				username ENV.MAVEN_USERNAME
				password ENV.MAVEN_PASSWORD
			}
		}
	}
}

task buildTerraform {
	subprojects.each {
		subprojects.each { dependsOn("${it.name}:build") }
	}
}

task publishTerraform {
	subprojects.each {
		subprojects.each { dependsOn("${it.name}:publish") }
	}
}

task publishTerraformLocally {
	subprojects.each {
		subprojects.each { dependsOn("${it.name}:publishToMavenLocal") }
	}
}

ext.checkVersion = { archivesBaseName, version ->
	try {
		def xml = new URL("https://maven.terraformersmc.com/com/terraformersmc/terraform-api/$archivesBaseName/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			println "$archivesBaseName version $version will not be published; already exists"
			return false
		} else {
			println "$archivesBaseName version $version will be published"
			return true
		}
	} catch (FileNotFoundException ignored) {
		println "$archivesBaseName is not on maven yet"
		return true
	}
}
